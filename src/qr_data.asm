################ JEDER DATENTEIL KANN NUR 4MIBYTE groß sein
################ DISPLAY MUSS AM ENDE datateil überschreiben
################ wer speichert welches register: https://msyksphinz-self.github.io/riscv-isadoc/html/regs.html#integer-registers
################ anleitung: https://www.thonky.com/qr-code-tutorial/introduction
################ zum überprüfen: https://www.nayuki.io/page/creating-a-qr-code-step-by-step


.data
.align 2
#alphaexponent to integer table (exponent 0 is array index 0 --> exponent 0 = integer 1)
a2i: .byte 1 2 4 8 16 32 64 128 29 58 116 232 205 135 19 38 76 152 45 90 180 117 234 201 143 3 6 12 24 48 96 192 157 39 78 156 37 74 148 53 106 212 181 119 238 193 159 35 70 140 5 10 20 40 80 160 93 186 105 210 185 111 222 161 95 190 97 194 153 47 94 188 101 202 137 15 30 60 120 240 253 231 211 187 107 214 177 127 254 225 223 163 91 182 113 226 217 175 67 134 17 34 68 136 13 26 52 104 208 189 103 206 129 31 62 124 248 237 199 147 59 118 236 197 151 51 102 204 133 23 46 92 184 109 218 169 79 158 33 66 132 21 42 84 168 77 154 41 82 164 85 170 73 146 57 114 228 213 183 115 230 209 191 99 198 145 63 126 252 229 215 179 123 246 241 255 227 219 171 75 150 49 98 196 149 55 110 220 165 87 174 65 130 25 50 100 200 141 7 14 28 56 112 224 221 167 83 166 81 162 89 178 121 242 249 239 195 155 43 86 172 69 138 9 18 36 72 144 61 122 244 245 247 243 251 235 203 139 11 22 44 88 176 125 250 233 207 131 27 54 108 216 173 71 142 1
#integer to alphaexponent table (integer value 1 is array index 0 --> integer 1 = exponent 0)
i2a: .byte
#Error-Correction-Level of the QR-Code
#0=L; 1=M; 2=Q; 3=H
error_correction_level: .byte 0
#QR-Version between 1-40
qr_version: .byte 0
#liste der maximalen nachrichtendatenblöcke pro version vier einträge (1.Element = ECL:L; 2.Element = ECL:M; 3.Element = ECL:Q; 4.Element = ECL:H)
.align 2
max_message_codeword: .half 17 14 11 7 32 26 20 14 53 42 32 24 78 62 46 34 106 84 60 44 134 106 74 58 154 122 86 64 192 152 108 84 230 180 130 98 271 213 151 119 321 251 177 137 367 287 203 155 425 331 241 177 458 362 258 194 520 412 292 220 586 450 332 250 644 504 364 280 718 560 394 310 792 624 442 338 858 666 482 382 929 711 509 403 1003 779 565 439 1091 857 611 461 1171 911 661 511 1273 997 715 535 1367 1059 751 593 1465 1125 805 625 1528 1190 868 658 1628 1264 908 698 1732 1370 982 742 1840 1452 1030 790 1952 1538 1112 842 2068 1628 1168 898 2188 1722 1228 958 2303 1809 1283 983 2431 1911 1351 1051 2563 1989 1423 1093 2699 2099 1499 1139 2809 2213 1579 1219 2953 2331 1663 1273
#liste der aufteilung der codewords in blöcke und anzahl der datencodeblöcke (pro Version 16 Elemente; diese enthalten jeweils pro ECL-Version 4 Elemente; erstes Element Anzahl an Blöcken, zweites Element anzahl der Codeblöcke für diesen Block)
block_partitioning: .byte 1 19 0 0 1 16 0 0 1 13 0 0 1 9 0 0 1 34 0 0 1 28 0 0 1 22 0 0 1 16 0 0 1 55 0 0 1 44 0 0 2 17 0 0 2 13 0 0 1 80 0 0 2 32 0 0 2 24 0 0 4 9 0 0 1 108 0 0 2 43 0 0 2 15 2 16 2 11 2 12 2 68 0 0 4 27 0 0 4 19 0 0 4 15 0 0 2 78 0 0 4 31 0 0 2 14 4 15 4 13 1 14 2 97 0 0 2 38 2 39 4 18 2 19 4 14 2 15 2 116 0 0 3 36 2 37 4 16 4 17 4 12 4 13 2 68 2 69 4 43 1 44 6 19 2 20 6 15 2 16 4 81 0 0 1 50 4 51 4 22 4 23 3 12 8 13 2 92 2 93 6 36 2 37 4 20 6 21 7 14 4 15 4 107 0 0 8 37 1 38 8 20 4 21 12 11 4 12 3 115 1 116 4 40 5 41 11 16 5 17 11 12 5 13 5 87 1 88 5 41 5 42 5 24 7 25 11 12 7 13 5 98 1 99 7 45 3 46 15 19 2 20 3 15 13 16 1 107 5 108 10 46 1 47 1 22 15 23 2 14 17 15 5 120 1 121 9 43 4 44 17 22 1 23 2 14 19 15 3 113 4 114 3 44 11 45 17 21 4 22 9 13 16 14 3 107 5 108 3 41 13 42 15 24 5 25 15 15 10 16 4 116 4 117 17 42 0 0 17 22 6 23 19 16 6 17 2 111 7 112 17 46 0 0 7 24 16 25 34 13 0 0 4 121 5 122 4 47 14 48 11 24 14 25 16 15 14 16 6 117 4 118 6 45 14 46 11 24 16 25 30 16 2 17 8 106 4 107 8 47 13 48 7 24 22 25 22 15 13 16 10 114 2 115 19 46 4 47 28 22 6 23 33 16 4 17 8 122 4 123 22 45 3 46 8 23 26 24 12 15 28 16 3 117 10 118 3 45 23 46 4 24 31 25 11 15 31 16 7 116 7 117 21 45 7 46 1 23 37 24 19 15 26 16 5 115 10 116 19 47 10 48 15 24 25 25 23 15 25 16 13 115 3 116 2 46 29 47 42 24 1 25 23 15 28 16 17 115 0 0 10 46 23 47 10 24 35 25 19 15 35 16 17 115 1 116 14 46 21 47 29 24 19 25 11 15 46 16 13 115 6 116 14 46 23 47 44 24 7 25 59 16 1 17 12 121 7 122 12 47 26 48 39 24 14 25 22 15 41 16 6 121 14 122 6 47 34 48 46 24 10 25 2 15 64 16 17 122 4 123 29 46 14 47 49 24 10 25 24 15 46 16 4 122 18 123 13 46 32 47 48 24 14 25 42 15 32 16 20 117 4 118 40 47 7 48 43 24 22 25 10 15 67 16 19 118 6 119 18 47 31 48 34 24 34 25 20 15 61 16
#Anzahl der benötigten ECL-Codewörter pro Version und pro Block und je ECL-Level
number_of_ecls: .byte 7 10 13 17 10 16 22 28 15 26 18 22 20 18 26 16 26 24 18 22 18 16 24 28 20 18 18 26 24 22 22 26 30 22 20 24 18 26 24 28 20 30 28 24 24 22 26 28 26 22 24 22 30 24 20 24 22 24 30 24 24 28 24 30 28 28 28 28 30 26 28 28 28 26 26 26 28 26 30 28 28 26 28 30 28 28 30 24 30 28 30 30 30 28 30 30 26 28 30 30 28 28 28 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30 30 28 30 30
#alle generatorpolynom exponenten die benötigt werden
gpo7: .byte 0 87 229 146 149 238 102 21
gpo10: .byte 0 251 67 46 61 118 70 64 94 32 45
gpo13: .byte 0 74 152 176 100 86 100 106 104 130 218 206 140 78
gpo15: .byte 0 8 183 61 91 202 37 51 58 58 237 140 124 5 99 105
gpo16: .byte 0 120 104 107 109 102 161 76 3 91 191 147 169 182 194 225 120
gpo17: .byte 0 43 139 206 78 43 239 123 206 214 147 24 99 150 39 243 163 136
gpo18: .byte 0 215 234 158 94 184 97 118 170 79 187 152 148 252 179 5 98 96 153
gpo20: .byte 0 17 60 79 50 61 163 26 187 202 180 221 225 83 239 156 164 212 212 188 190
gpo22: .byte 0 210 171 247 242 93 230 14 109 221 53 200 74 8 172 98 80 219 134 160 105 165 231
gpo24: .byte 0 229 121 135 48 211 117 251 126 159 180 169 152 192 226 228 218 111 0 117 232 87 96 227 21
gpo26: .byte 0 173 125 158 2 103 182 118 17 145 201 111 28 165 53 161 21 245 142 13 102 48 227 153 145 218 70
gpo28: .byte 0 168 223 200 104 224 234 108 180 110 190 195 147 205 27 232 201 21 43 245 87 42 195 212 119 242 37 9 123
gpo30: .byte 0 41 173 145 152 216 31 179 182 50 48 110 86 239 96 222 125 42 173 226 193 224 130 156 37 251 216 238 40 192 180

#paddingbits pro version 1 Byte
paddingbits: .byte 0 7 7 7 7 7 0 0 0 0 0 0 0 3 3 3 3 3 3 3 4 4 4 4 4 4 4 3 3 3 3 3 3 3 0 0 0 0 0 0

#liste aller möglichen alignment pattern
align_positions: .byte 0 0 0 0 0 0 0 6 18 0 0 0 0 0 6 22 0 0 0 0 0 6 26 0 0 0 0 0 6 30 0 0 0 0 0 6 34 0 0 0 0 0 6 22 38 0 0 0 0 6 24 42 0 0 0 0 6 26 46 0 0 0 0 6 28 50 0 0 0 0 6 30 54 0 0 0 0 6 32 58 0 0 0 0 6 34 62 0 0 0 0 6 26 46 66 0 0 0 6 26 48 70 0 0 0 6 26 50 74 0 0 0 6 30 54 78 0 0 0 6 30 56 82 0 0 0 6 30 58 86 0 0 0 6 34 62 90 0 0 0 6 28 50 72 94 0 0 6 26 50 74 98 0 0 6 30 54 78 102 0 0 6 28 54 80 106 0 0 6 32 58 84 110 0 0 6 30 58 86 114 0 0 6 34 62 90 118 0 0 6 26 50 74 98 122 0 6 30 54 78 102 126 0 6 26 52 78 104 130 0 6 30 56 82 108 134 0 6 34 60 86 112 138 0 6 30 58 86 114 142 0 6 34 62 90 118 146 0 6 30 54 78 102 126 150 6 24 50 76 102 128 154 6 28 54 80 106 132 158 6 32 58 84 110 136 162 6 26 54 82 110 138 166 6 30 58 86 114 142 170
p2_message: .byte 0x40 0xD4 0x86 0x16 0xC6 0xC6 0xF2 0x06 0x96 0x36 0x82 0x06 0x26 0x96 0xE0 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC 0x11 0xEC
#liste aller möglichen formatinformationen (jeweils die 8(0-7) masking-versionen hintereinander und das 4 mal für alle ecl-levels)(nur 15Bit davon jeweils benötigt)
.align 1
format_infos: .half 0x77C4 0x72F3 0x7DAA 0x789D 0x662F 0x6318 0x6C41 0x6976 0x5412 0x5125 0x5E7C 0x5B4B 0x45F9 0x40CE 0x4F97 0x4AA0 0x355F 0x3068 0x3F31 0x3A06 0x24B4 0x2183 0x2EDA 0x2BED 0x1689 0x13BE 0x1CE7 0x19D0 0x0762 0x0255 0x0D0C 0x083B


#liste aller möglichen versionsinformationen -> erstes element ist Version 7 (nur 18 bits werden benötigt)
.align 2
versions_infos: .word 0x00007C94 0x000085BC 0x00009A99 0x0000A4D3 0x0000BBF6 0x0000C762 0x0000D847 0x0000E60D 0x0000F928 0x00010B78 0x0001145D 0x00012A17 0x00013532 0x000149A6 0x00015683 0x000168C9 0x000177EC 0x00018EC4 0x000191E1 0x0001AFAB 0x0001B08E 0x0001CC1A 0x0001D33F 0x0001ED75 0x0001F250 0x000209D5 0x000216F0 0x000228BA 0x0002379F 0x00024B0B 0x0002542E 0x00026A64 0x00027541 0x00028C69

#properties for the display
.eqv DISPLAY_ADDRESS 0x10010000 #kann maximal 4194304Byte groß sein
.eqv DISPLAY_WIDTH 256
.eqv DISPLAY_HEIGHT 256

#bufferlocations for messagecodewords, ec-codewords and finaldata; 1 Codeblock = 1Byte
.eqv MESSAGE_CODEWORD_ADDRESS 0x10140000 #maximal 2956 codeblöcke groß
.eqv EC_CODEWORD_ADDRESS 0x10140B8C #maximal 2430 codeblöcke groß
.eqv FINAL_DATA 0x1014150A
